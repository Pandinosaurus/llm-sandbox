import logging
import re
from typing import TYPE_CHECKING

from llm_sandbox.const import SupportedLanguage
from llm_sandbox.data import PlotOutput

from .base import AbstractLanguageHandler, LanguageConfig

if TYPE_CHECKING:
    from .base import ContainerProtocol


class JavaScriptHandler(AbstractLanguageHandler):
    """Handler for JavaScript/NodeJS."""

    def __init__(self, logger: logging.Logger | None = None) -> None:
        """Initialize the JavaScript handler."""
        super().__init__(logger)

        self.config = LanguageConfig(
            name=SupportedLanguage.JAVASCRIPT,
            file_extension="js",
            execution_commands=["node {file}"],
            package_manager="npm install",
            plot_detection=None,
        )

    def inject_plot_detection_code(self, code: str) -> str:
        """JavaScript plot detection is not directly supported here.

        Consider client-side libraries or specific Node.js plotting libraries.
        """
        return code

    def extract_plots(
        self,
        container: "ContainerProtocol",  # noqa: ARG002
        output_dir: str,  # noqa: ARG002
    ) -> list[PlotOutput]:
        """Plot extraction for JavaScript is not implemented.

        This would typically involve handling files generated by libraries like Chart.js, D3.js,
        or Puppeteer for server-side rendering.
        """
        return []

    def get_import_patterns(self, module: str) -> str:
        """Get the regex patterns for JavaScript import statements.

        Regex to match import (ES6) and require (CommonJS) statements.
        Covers:
            import ... from 'module';
            import ... from "module";
            const ... = require('module');
            const ... = require("module");
            require('module')
        Handles variations in whitespace, aliasing, and destructured imports.

        Args:
            module (str): The name of the module to get import patterns for.

        Returns:
            str: The regex patterns for import statements.

        """
        escaped_module = re.escape(module)
        # Pattern for ES6 imports: import ... from "module" or 'module'
        es6_pattern = r"import(?:\s+.*\s+from)?\s*\[\'\"]" + escaped_module + r"\[\'\"];?"
        # Pattern for CommonJS requires: require("module") or require('module')
        commonjs_pattern = r"require\s*\(\s*\[\'\"]" + escaped_module + r"\['\"]\s*\);?"
        return r"(?:" + es6_pattern + r"|" + commonjs_pattern + r")"

    def filter_comments(self, code: str) -> str:
        """Filter out JavaScript comments from code.

        Handles:
        - Single line comments starting with //
        - Multi-line comments between /* and */
        - Preserves empty lines for readability

        Args:
            code (str): The code to filter comments from.

        Returns:
            str: The code with comments removed.

        """
        # First remove multi-line comments
        code = re.sub(r"/\*[\s\S]*?\*/", "", code)

        # Then handle single-line comments
        filtered_lines = []
        for line in code.split("\n"):
            # Remove inline comments
            line = re.sub(r"//.*$", "", line)
            # Keep the line if it has non-whitespace content
            if line.strip():
                filtered_lines.append(line)
            else:
                # Preserve empty lines for readability
                filtered_lines.append("")
        return "\n".join(filtered_lines)
